from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

import app.keyboards as kb
from app.MWAPI import get_person_info

router = Router()


class UserInput(StatesGroup):
    name = State()
    current_person = State()  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏


async def download_photo(file_id: str, file_path: str, bot: Bot):
    file = await bot.get_file(file_id)
    await bot.download_file(file.file_path, file_path)


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-—ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—é!',
                         reply_markup=kb.main)


@router.message(Command('help'))
@router.message(F.text.lower() == '–ø–æ–º–æ—â—å')
async def cmd_help(message: Message):
    await message.answer('–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n'
                         '/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n'
                         '/find - –ø–æ–∏—Å–∫ –ª–∏—á–Ω–æ—Å—Ç–∏\n'
                         '/cancel - –æ—Ç–º–µ–Ω–∞')


@router.message(UserInput.name, F.text.lower() == '–æ—Ç–º–µ–Ω–∞')
@router.message(UserInput.name, Command('cancel'))
async def cancel_search(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω', reply_markup=kb.main)


@router.message(Command('find'))
@router.message(F.text.lower() == '–ø–æ–∏—Å–∫')
async def request_name(message: Message, state: FSMContext):
    await state.set_state(UserInput.name)
    await message.answer('üìë –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞:', reply_markup=kb.cancel)


async def send_person_info(message: Message, info: dict):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—á–Ω–æ—Å—Ç–∏"""

    birth_date = info.get('birth_date')
    death_date = info.get('death_date')
    occupations = ', '.join(info.get('occupations', []))
    countries = ', '.join(info.get('countries', []))
    description = info.get('description', '')
    summary = info.get('summary', '')
    image_url = info.get('image_url')

    info_message = f'<b>ü™™ {info.get("full_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}</b>\n\n'

    if birth_date or death_date:
        info_message += f'üìÖ <b>–ì–æ–¥—ã –∂–∏–∑–Ω–∏:</b> {birth_date} - {death_date}\n'
    if occupations:
        info_message += f'üíº <b>–†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b> {occupations}\n'
    if countries:
        info_message += f'üåç <b>–°—Ç—Ä–∞–Ω—ã:</b> {countries}\n'
    if description:
        info_message += f'\nüìÉ {description}\n'
    """if summary:
        info_message += f'\n‚ÑπÔ∏è {summary[:500]}...'"""

    if image_url:
        await message.answer_photo(photo=image_url, caption=info_message,
                                   reply_markup=kb.more_info, parse_mode="HTML")
    else:
        await message.answer(info_message, reply_markup=kb.more_info, parse_mode="HTML")


@router.message(UserInput.name)
async def search_by_name(message: Message, state: FSMContext):
    name = message.text
    await message.answer(f'üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ "{name}"...')

    info = get_person_info(name)

    if "error" in info:
        await message.answer(info["error"], reply_markup=kb.main)
        await state.clear()
        return

    await state.update_data(current_person=info)
    await send_person_info(message, info)
    await state.set_state(UserInput.current_person)


@router.callback_query(F.data == 'demographic data')
async def demographic_data(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    person = data.get('current_person', {})

    message_text = "<b>üìä –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"

    if person.get('gender'):
        message_text += f"üë§ <b>–ü–æ–ª:</b> {', '.join(person['gender'])}\n"
    if person.get('birth_date'):
        message_text += f"üéÇ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {person['birth_date']}\n"
    if person.get('birth_place'):
        message_text += f"üè† <b>–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {', '.join(person['birth_place'])}\n"
    if person.get('death_date'):
        message_text += f"‚ö∞Ô∏è <b>–î–∞—Ç–∞ —Å–º–µ—Ä—Ç–∏:</b> {person['death_date']}\n"
    if person.get('death_place'):
        message_text += f"üïØÔ∏è <b>–ú–µ—Å—Ç–æ —Å–º–µ—Ä—Ç–∏:</b> {', '.join(person['death_place'])}\n"
    if person.get('ethnic_group'):
        message_text += f"üåê <b>–≠—Ç–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å:</b> {', '.join(person['ethnic_group'])}\n"
    if person.get('religion'):
        message_text += f"üôè <b>–†–µ–ª–∏–≥–∏—è:</b> {', '.join(person['religion'])}\n"
    if person.get('children'):
        message_text += f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–î–µ—Ç–∏:</b> {', '.join(person['children'])}\n"

    await callback.message.answer(message_text, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == 'geographical information')
async def geographical_info(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    person = data.get('current_person', {})

    message_text = "<b>üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n"

    if person.get('countries'):
        message_text += f"üè≥Ô∏è <b>–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:</b> {', '.join(person['countries'])}\n"
    if person.get('birth_place'):
        message_text += f"üìç <b>–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {', '.join(person['birth_place'])}\n"
    if person.get('death_place'):
        message_text += f"‚ö∞Ô∏è <b>–ú–µ—Å—Ç–æ —Å–º–µ—Ä—Ç–∏:</b> {', '.join(person['death_place'])}\n"
    if person.get('languages'):
        message_text += f"üó£Ô∏è <b>–Ø–∑—ã–∫–∏:</b> {', '.join(person['languages'])}\n"

    await callback.message.answer(message_text, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == 'professional activity')
async def professional_activity(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    person = data.get('current_person', {})

    message_text = "<b>üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>\n\n"

    if person.get('occupations'):
        message_text += f"üëî <b>–†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b> {', '.join(person['occupations'])}\n"
    if person.get('educations'):
        message_text += f"üéì <b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b> {', '.join(person['educations'])}\n"
    if person.get('positions'):
        message_text += f"üèõÔ∏è <b>–î–æ–ª–∂–Ω–æ—Å—Ç–∏:</b> {', '.join(person['positions'])}\n"
    if person.get('awards'):
        message_text += f"üèÜ <b>–ù–∞–≥—Ä–∞–¥—ã:</b> {', '.join(person['awards'])}\n"
    if person.get('notable_works'):
        message_text += f"üìö <b>–ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:</b> {', '.join(person['notable_works'])}\n"

    await callback.message.answer(message_text, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == 'political-organizational affiliation')
async def political_org_affiliation(callback: CallbackQuery,
                                    state: FSMContext):
    data = await state.get_data()
    person = data.get('current_person', {})

    message_text = "<b>üèõÔ∏è –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è/–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å:</b>\n\n"

    if person.get('parties'):
        message_text += f"üéóÔ∏è <b>–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä—Ç–∏–∏:</b> {', '.join(person['parties'])}\n"
    if person.get('official_websites'):
        websites = person['official_websites']
        if isinstance(websites, list):
            message_text += f"üåê <b>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã:</b> {', '.join(websites)}\n"
        else:
            message_text += f"üåê <b>–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç:</b> {websites}\n"

    await callback.message.answer(message_text, parse_mode="HTML")
    await callback.answer()